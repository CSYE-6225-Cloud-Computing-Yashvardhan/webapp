name: Packer Validation Check

on:
  push:
    branches:
      - main

jobs:
  packer-image-build:
    name: "Packer Build Custom Image"

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy App files to /webapp
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Print the webapp directory (For Debugging)
        run: |
          cd webapp
          ls -al
          cd ..

      - name: Creating webapp zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip webapp/

      - name: Delete copied files
        run: rm -rf webapp && ls -R

      - name: Print all folders (For Debugging)
        run: ls -al

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Install and start MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl enable mysql

      - name: Setup database
        run: | 
          sudo mysql --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"

      - name: Install Dependencies
        run: npm install

      - name: Configure Environment Variables
        run: |
          echo > .env
          ls -al | grep .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          

      - name: Run Tests
        run: npx jest --forceExit

      - name: Configure AWS Credentials (Dev Account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Installing Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/aws.pkr.hcl"

      - name: Run `packer fmt` and check for changes
        id: format
        run: |
          packer fmt -check -diff ./packer/aws.pkr.hcl || exit 1

      - name: Run `packer validate`
        id: validate
        run: |
          packer validate \
          -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var "aws_region=${{ vars.AWS_REGION }}" \
          -var "aws_ami_desc=${{ vars.AWS_AMI_DESC }}" \
          -var "instance_type=${{ vars.INSTANCE_TYPE }}" \
          -var "source_ami=${{ vars.SOURCE_AMI }}" \
          -var "subnet_id=${{ vars.SUBNET_ID }}" \
          -var "ssh_username=${{ vars.SSH_USERNAME }}" \
          -var "db_user=${{ secrets.DB_USER }}" \
          -var "db_password=${{ secrets.DB_PASSWORD }}" \
          -var "db_host=${{ secrets.DB_HOST }}" \
          -var "db_name=${{ secrets.DB_NAME }}" \
          ./packer/aws.pkr.hcl

      - name: Run `packer build` (Build AMI in Dev Account)
        id: build
        run: |
            packer build \
            -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "aws_region=${{ vars.AWS_REGION }}" \
            -var "aws_ami_desc=${{ vars.AWS_AMI_DESC }}" \
            -var "instance_type=${{ vars.INSTANCE_TYPE }}" \
            -var "source_ami=${{ vars.SOURCE_AMI }}" \
            -var "subnet_id=${{ vars.SUBNET_ID }}" \
            -var "ssh_username=${{ vars.SSH_USERNAME }}" \
            -var "db_user=${{ secrets.DB_USER }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "db_host=${{ secrets.DB_HOST }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            ./packer/aws.pkr.hcl | tee packer_output.log

            ami_id=$(grep -oP 'ami-\w+' packer_output.log | tail -n 1)
            echo "AMI ID: $ami_id"
            echo "::set-output name=ami_id::$ami_id"

      - name: Configure AWS Credentials (Demo Account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Launch Template ID
        id: fetch_template
        run: |
            export LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
              --filters "Name=tag:Name,Values=csye6225_asg" \
              --query "LaunchTemplates[0].LaunchTemplateId" \
              --output text)
            echo "LAUNCH_TEMPLATE_ID=${LAUNCH_TEMPLATE_ID}" >> $GITHUB_ENV
            echo "::set-output name=launch_template_id::$LAUNCH_TEMPLATE_ID"

      - name: Update Launch Template
        id: update_template
        run: |
            LATEST_VERSION=$(aws ec2 describe-launch-templates \
              --launch-template-id ${{ steps.fetch_template.outputs.launch_template_id }} \
              --query "LaunchTemplates[0].LatestVersionNumber" --output text)
            aws ec2 create-launch-template-version \
              --launch-template-id ${{ steps.fetch_template.outputs.launch_template_id }} \
              --source-version $LATEST_VERSION \
              --launch-template-data '{"ImageId": "'"${{ steps.build.outputs.ami_id }}"'"}'
            aws ec2 modify-launch-template \
              --launch-template-id ${{ steps.fetch_template.outputs.launch_template_id }} \
              --default-version $(( LATEST_VERSION + 1 ))

      - name: Start Instance Refresh
        id: instance_refresh
        run: |
            INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name ${{ vars.AUTOSCALING_GROUP_NAME }} \
              --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
              --query "InstanceRefreshId" \
              --output text)
            echo "INSTANCE_REFRESH_ID=${INSTANCE_REFRESH_ID}" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        id: wait_refresh
        run: |
            STATUS="InProgress"
                while [[ "${STATUS}" == "InProgress" || "${STATUS}" == "Pending" ]]; do
                  STATUS=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name ${{ vars.AUTOSCALING_GROUP_NAME }} \
                    --instance-refresh-ids "${INSTANCE_REFRESH_ID}" \
                    --query "InstanceRefreshes[0].Status" \
                    --output text)
                  echo "Instance Refresh Status: ${STATUS}"
                  sleep 30
                done
                if [[ "${STATUS}" != "Successful" ]]; then
                  echo "Instance refresh failed with status: ${STATUS}"
                  exit 1
                fi